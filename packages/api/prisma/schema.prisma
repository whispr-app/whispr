// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  ADMIN
}

enum MessageType {
  TEXT
  REACTION
  READ_RECEIPT
}

enum StatusType {
  ONLINE
  IDLE
  DND
  OFFLINE
}

model User {
  id       String     @id @default(auto()) @map("_id") @db.ObjectId
  username String     @unique
  nickname String
  password String
  tokens   Token[]
  keyPair  KeyPair?
  messages Message[]
  role     Role       @default(USER)
  status   StatusType @default(OFFLINE)
  banned   Boolean    @default(false)

  userChannelPermissions UserChannelPermissions[]
  AccessKey              AccessKey?               @relation(fields: [accessKeyId], references: [id])
  accessKeyId            String?                  @db.ObjectId
}

model AccessKey {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  key          String   @unique
  createdAt    DateTime @default(now())
  numberOfUses Int      @default(1)
  users        User[]
}

model KeyPair {
  id                  String @id @default(auto()) @map("_id") @db.ObjectId
  encryptedPrivateKey String
  publicKey           String
  user                User   @relation(fields: [userId], references: [id])
  userId              String @unique @db.ObjectId
}

model Token {
  id     String  @id @default(auto()) @map("_id") @db.ObjectId
  jti    String  @unique
  user   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model UserChannelPermissions {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?  @db.ObjectId
  channel   Channel? @relation(fields: [channelId], references: [id])
  channelId String?  @db.ObjectId
  canRead   Boolean
  canWrite  Boolean
}

model Channel {
  id                     String                   @id @default(auto()) @map("_id") @db.ObjectId
  name                   String?
  messages               Message[]
  userChannelPermissions UserChannelPermissions[]
  lastMessageId          String?                  @db.ObjectId
}

model Message {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  edited    DateTime?
  text      MessageText[] @relation("MessageTexts")
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?       @db.ObjectId
  Channel   Channel?      @relation(fields: [channelId], references: [id])
  channelId String?       @db.ObjectId
  quoteId   String?       @db.ObjectId
  quote     Message?      @relation("MessageQuotes", fields: [quoteId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  quotes    Message[]     @relation("MessageQuotes")
}

model MessageText {
  id                    String   @id @default(auto()) @map("_id") @db.ObjectId
  cipherText            String
  targetUserId          String   @db.ObjectId
  message               Message? @relation("MessageTexts", fields: [messageId], references: [id])
  messageId             String?  @db.ObjectId
  encryptedSymmetricKey String
}
